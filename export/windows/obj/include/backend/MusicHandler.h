// Generated by Haxe 4.3.6
#ifndef INCLUDED_backend_MusicHandler
#define INCLUDED_backend_MusicHandler

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(backend,MusicHandler)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS2(flixel,sound,FlxSound)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES MusicHandler_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MusicHandler_obj OBJ_;
		MusicHandler_obj();

	public:
		enum { _hx_ClassId = 0x193cc0d9 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="backend.MusicHandler")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"backend.MusicHandler"); }

		inline static ::hx::ObjectPtr< MusicHandler_obj > __new() {
			::hx::ObjectPtr< MusicHandler_obj > __this = new MusicHandler_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< MusicHandler_obj > __alloc(::hx::Ctx *_hx_ctx) {
			MusicHandler_obj *__this = (MusicHandler_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MusicHandler_obj), false, "backend.MusicHandler"));
			*(void **)__this = MusicHandler_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MusicHandler_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MusicHandler",c5,e1,5b,c4); }

		static void __boot();
		static  ::flixel::sound::FlxSound inst;
		static  ::flixel::sound::FlxSound voices;
		static bool playing;
		static void loadInstAndVoices(::String songName);
		static ::Dynamic loadInstAndVoices_dyn();

		static void play();
		static ::Dynamic play_dyn();

		static void stop();
		static ::Dynamic stop_dyn();

		static void pause();
		static ::Dynamic pause_dyn();

		static void checkSync();
		static ::Dynamic checkSync_dyn();

};

} // end namespace backend

#endif /* INCLUDED_backend_MusicHandler */ 
