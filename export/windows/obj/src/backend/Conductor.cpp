// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_MusicHandler
#include <backend/MusicHandler.h>
#endif
#ifndef INCLUDED_backend_events_BeatEvent
#include <backend/events/BeatEvent.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_FlxGame
#include <flixel/FlxGame.h>
#endif
#ifndef INCLUDED_flixel_FlxState
#include <flixel/FlxState.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedContainer
#include <flixel/group/FlxTypedContainer.h>
#endif
#ifndef INCLUDED_flixel_group_FlxTypedGroup
#include <flixel/group/FlxTypedGroup.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_system_frontEnds_SoundFrontEnd
#include <flixel/system/frontEnds/SoundFrontEnd.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObject
#include <openfl/display/DisplayObject.h>
#endif
#ifndef INCLUDED_openfl_display_DisplayObjectContainer
#include <openfl/display/DisplayObjectContainer.h>
#endif
#ifndef INCLUDED_openfl_display_IBitmapDrawable
#include <openfl/display/IBitmapDrawable.h>
#endif
#ifndef INCLUDED_openfl_display_InteractiveObject
#include <openfl/display/InteractiveObject.h>
#endif
#ifndef INCLUDED_openfl_display_Sprite
#include <openfl/display/Sprite.h>
#endif
#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
#ifndef INCLUDED_openfl_events_EventDispatcher
#include <openfl/events/EventDispatcher.h>
#endif
#ifndef INCLUDED_openfl_events_IEventDispatcher
#include <openfl/events/IEventDispatcher.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_080e9a5446946e07_8_new,"backend.Conductor","new",0xa4883a5f,"backend.Conductor.new","backend/Conductor.hx",8,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_29_play,"backend.Conductor","play",0x54028315,"backend.Conductor.play","backend/Conductor.hx",29,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_38_pause,"backend.Conductor","pause",0x26f9feb5,"backend.Conductor.pause","backend/Conductor.hx",38,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_42_reset,"backend.Conductor","reset",0x506a718e,"backend.Conductor.reset","backend/Conductor.hx",42,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_52_cancel,"backend.Conductor","cancel",0xbc748cdb,"backend.Conductor.cancel","backend/Conductor.hx",52,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_59_setBPM,"backend.Conductor","setBPM",0x73a2cfbe,"backend.Conductor.setBPM","backend/Conductor.hx",59,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_66_addConductorTime,"backend.Conductor","addConductorTime",0x601eef54,"backend.Conductor.addConductorTime","backend/Conductor.hx",66,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_92_beatHit,"backend.Conductor","beatHit",0x284fbffc,"backend.Conductor.beatHit","backend/Conductor.hx",92,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_9_boot,"backend.Conductor","boot",0x4ac3d953,"backend.Conductor.boot","backend/Conductor.hx",9,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_10_boot,"backend.Conductor","boot",0x4ac3d953,"backend.Conductor.boot","backend/Conductor.hx",10,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_11_boot,"backend.Conductor","boot",0x4ac3d953,"backend.Conductor.boot","backend/Conductor.hx",11,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_13_boot,"backend.Conductor","boot",0x4ac3d953,"backend.Conductor.boot","backend/Conductor.hx",13,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_16_boot,"backend.Conductor","boot",0x4ac3d953,"backend.Conductor.boot","backend/Conductor.hx",16,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_17_boot,"backend.Conductor","boot",0x4ac3d953,"backend.Conductor.boot","backend/Conductor.hx",17,0x5443f372)
HX_LOCAL_STACK_FRAME(_hx_pos_080e9a5446946e07_19_boot,"backend.Conductor","boot",0x4ac3d953,"backend.Conductor.boot","backend/Conductor.hx",19,0x5443f372)
namespace backend{

void Conductor_obj::__construct(::hx::Null< bool >  __o_startImmedietally){
            		bool startImmedietally = __o_startImmedietally.Default(false);
            	HX_GC_STACKFRAME(&_hx_pos_080e9a5446946e07_8_new)
HXLINE(  21)		this->onBeat = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  24)		::backend::Conductor_obj::doConductorTime = startImmedietally;
HXLINE(  25)		::backend::Conductor_obj::evDisp =  ::openfl::events::EventDispatcher_obj::__alloc( HX_CTX ,null());
            	}

Dynamic Conductor_obj::__CreateEmpty() { return new Conductor_obj; }

void *Conductor_obj::_hx_vtable = 0;

Dynamic Conductor_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Conductor_obj > _hx_result = new Conductor_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Conductor_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x01f72433;
}

Float Conductor_obj::BPM;

Float Conductor_obj::TIME;

bool Conductor_obj::doConductorTime;

 ::openfl::events::Event Conductor_obj::mainBeatEvent;

 ::openfl::events::EventDispatcher Conductor_obj::evDisp;

int Conductor_obj::curBeat;

Float Conductor_obj::lastBeatTime;

Float Conductor_obj::beatVal;

void Conductor_obj::play(::hx::Null< Float >  __o_bpmNew,::hx::Null< bool >  __o_runMusicPlay){
            		Float bpmNew = __o_bpmNew.Default(120);
            		bool runMusicPlay = __o_runMusicPlay.Default(false);
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_29_play)
HXLINE(  30)		::backend::Conductor_obj::BPM = bpmNew;
HXLINE(  31)		::backend::Conductor_obj::doConductorTime = true;
HXLINE(  32)		::backend::Conductor_obj::beatVal = ((( (Float)(60) ) / ::backend::Conductor_obj::BPM) * ( (Float)(1000) ));
HXLINE(  33)		if (runMusicPlay) {
HXLINE(  34)			::backend::MusicHandler_obj::play();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Conductor_obj,play,(void))

void Conductor_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_38_pause)
HXDLIN(  38)		::backend::Conductor_obj::doConductorTime = false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Conductor_obj,pause,(void))

void Conductor_obj::reset(::hx::Null< Float >  __o_bpmNew,::hx::Null< bool >  __o_runMusicPlay){
            		Float bpmNew = __o_bpmNew.Default(120);
            		bool runMusicPlay = __o_runMusicPlay.Default(false);
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_42_reset)
HXLINE(  43)		::backend::Conductor_obj::BPM = bpmNew;
HXLINE(  44)		::backend::Conductor_obj::beatVal = ((( (Float)(60) ) / ::backend::Conductor_obj::BPM) * ( (Float)(1000) ));
HXLINE(  45)		::backend::Conductor_obj::TIME = ( (Float)(0) );
HXLINE(  46)		::backend::Conductor_obj::curBeat = 0;
HXLINE(  47)		::backend::Conductor_obj::lastBeatTime = ( (Float)(0) );
HXLINE(  48)		if (runMusicPlay) {
HXLINE(  49)			::backend::MusicHandler_obj::play();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Conductor_obj,reset,(void))

void Conductor_obj::cancel(){
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_52_cancel)
HXLINE(  53)		::backend::Conductor_obj::doConductorTime = false;
HXLINE(  54)		::backend::Conductor_obj::TIME = ( (Float)(0) );
HXLINE(  55)		::backend::Conductor_obj::curBeat = 0;
HXLINE(  56)		::backend::Conductor_obj::lastBeatTime = ( (Float)(0) );
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Conductor_obj,cancel,(void))

void Conductor_obj::setBPM(Float bpmNew){
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_59_setBPM)
HXLINE(  60)		::backend::Conductor_obj::BPM = bpmNew;
HXLINE(  61)		::backend::Conductor_obj::beatVal = ((( (Float)(60) ) / ::backend::Conductor_obj::BPM) * ( (Float)(1000) ));
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Conductor_obj,setBPM,(void))

void Conductor_obj::addConductorTime(Float elapsed, ::flixel::FlxState state){
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_66_addConductorTime)
HXDLIN(  66)		if (::hx::IsInstanceEq( ::flixel::FlxG_obj::game->_state,state )) {
HXLINE(  68)			if (::backend::Conductor_obj::doConductorTime) {
HXLINE(  70)				 ::Dynamic _hx_tmp = ::hx::ClassOf< ::backend::Conductor >();
HXDLIN(  70)				::backend::Conductor_obj::TIME = (::backend::Conductor_obj::TIME + (elapsed * ( (Float)(1000) )));
            			}
HXLINE(  73)			if ((::backend::Conductor_obj::TIME >= (::backend::Conductor_obj::lastBeatTime + ::backend::Conductor_obj::beatVal))) {
HXLINE(  75)				::backend::Conductor_obj::curBeat++;
HXLINE(  76)				 ::Dynamic _hx_tmp1 = ::hx::ClassOf< ::backend::Conductor >();
HXDLIN(  76)				::backend::Conductor_obj::lastBeatTime = (::backend::Conductor_obj::lastBeatTime + ::backend::Conductor_obj::beatVal);
HXLINE(  77)				::backend::Conductor_obj::beatHit(::backend::Conductor_obj::curBeat);
            			}
HXLINE(  79)			bool _hx_tmp2;
HXDLIN(  79)			if (::hx::IsNotNull( ::flixel::FlxG_obj::sound->music )) {
HXLINE(  79)				_hx_tmp2 = !(::backend::MusicHandler_obj::playing);
            			}
            			else {
HXLINE(  79)				_hx_tmp2 = false;
            			}
HXDLIN(  79)			if (_hx_tmp2) {
HXLINE(  81)				bool _hx_tmp3;
HXDLIN(  81)				if (!((::flixel::FlxG_obj::sound->music->_time > (::backend::Conductor_obj::TIME + 50)))) {
HXLINE(  81)					_hx_tmp3 = (::flixel::FlxG_obj::sound->music->_time < (::backend::Conductor_obj::TIME - ( (Float)(50) )));
            				}
            				else {
HXLINE(  81)					_hx_tmp3 = true;
            				}
HXDLIN(  81)				if (_hx_tmp3) {
HXLINE(  82)					::flixel::FlxG_obj::sound->music->set_time(::backend::Conductor_obj::TIME);
            				}
            			}
            			else {
HXLINE(  84)				bool _hx_tmp4;
HXDLIN(  84)				bool _hx_tmp5;
HXDLIN(  84)				if (::hx::IsNotNull( ::backend::MusicHandler_obj::inst )) {
HXLINE(  84)					_hx_tmp5 = ::hx::IsNotNull( ::backend::MusicHandler_obj::voices );
            				}
            				else {
HXLINE(  84)					_hx_tmp5 = false;
            				}
HXDLIN(  84)				if (_hx_tmp5) {
HXLINE(  84)					_hx_tmp4 = ::backend::MusicHandler_obj::playing;
            				}
            				else {
HXLINE(  84)					_hx_tmp4 = false;
            				}
HXDLIN(  84)				if (_hx_tmp4) {
HXLINE(  86)					::backend::MusicHandler_obj::checkSync();
            				}
            			}
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC2(Conductor_obj,addConductorTime,(void))

void Conductor_obj::beatHit(int beatNum){
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_92_beatHit)
HXDLIN(  92)		::backend::Conductor_obj::evDisp->dispatchEvent(::backend::Conductor_obj::mainBeatEvent);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Conductor_obj,beatHit,(void))


::hx::ObjectPtr< Conductor_obj > Conductor_obj::__new(::hx::Null< bool >  __o_startImmedietally) {
	::hx::ObjectPtr< Conductor_obj > __this = new Conductor_obj();
	__this->__construct(__o_startImmedietally);
	return __this;
}

::hx::ObjectPtr< Conductor_obj > Conductor_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_startImmedietally) {
	Conductor_obj *__this = (Conductor_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Conductor_obj), true, "backend.Conductor"));
	*(void **)__this = Conductor_obj::_hx_vtable;
	__this->__construct(__o_startImmedietally);
	return __this;
}

Conductor_obj::Conductor_obj()
{
}

void Conductor_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Conductor);
	HX_MARK_MEMBER_NAME(onBeat,"onBeat");
	HX_MARK_END_CLASS();
}

void Conductor_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(onBeat,"onBeat");
}

::hx::Val Conductor_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"onBeat") ) { return ::hx::Val( onBeat ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Conductor_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"BPM") ) { outValue = ( BPM ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"TIME") ) { outValue = ( TIME ); return true; }
		if (HX_FIELD_EQ(inName,"play") ) { outValue = play_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { outValue = pause_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"reset") ) { outValue = reset_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"evDisp") ) { outValue = ( evDisp ); return true; }
		if (HX_FIELD_EQ(inName,"cancel") ) { outValue = cancel_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"setBPM") ) { outValue = setBPM_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curBeat") ) { outValue = ( curBeat ); return true; }
		if (HX_FIELD_EQ(inName,"beatVal") ) { outValue = ( beatVal ); return true; }
		if (HX_FIELD_EQ(inName,"beatHit") ) { outValue = beatHit_dyn(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastBeatTime") ) { outValue = ( lastBeatTime ); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mainBeatEvent") ) { outValue = ( mainBeatEvent ); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"doConductorTime") ) { outValue = ( doConductorTime ); return true; }
		break;
	case 16:
		if (HX_FIELD_EQ(inName,"addConductorTime") ) { outValue = addConductorTime_dyn(); return true; }
	}
	return false;
}

::hx::Val Conductor_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"onBeat") ) { onBeat=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

bool Conductor_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"BPM") ) { BPM=ioValue.Cast< Float >(); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"TIME") ) { TIME=ioValue.Cast< Float >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"evDisp") ) { evDisp=ioValue.Cast<  ::openfl::events::EventDispatcher >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"curBeat") ) { curBeat=ioValue.Cast< int >(); return true; }
		if (HX_FIELD_EQ(inName,"beatVal") ) { beatVal=ioValue.Cast< Float >(); return true; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"lastBeatTime") ) { lastBeatTime=ioValue.Cast< Float >(); return true; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"mainBeatEvent") ) { mainBeatEvent=ioValue.Cast<  ::openfl::events::Event >(); return true; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"doConductorTime") ) { doConductorTime=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

void Conductor_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("onBeat",35,ea,9d,e3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Conductor_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(Conductor_obj,onBeat),HX_("onBeat",35,ea,9d,e3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo Conductor_obj_sStaticStorageInfo[] = {
	{::hx::fsFloat,(void *) &Conductor_obj::BPM,HX_("BPM",bf,5a,32,00)},
	{::hx::fsFloat,(void *) &Conductor_obj::TIME,HX_("TIME",0d,94,bd,37)},
	{::hx::fsBool,(void *) &Conductor_obj::doConductorTime,HX_("doConductorTime",09,ed,2d,77)},
	{::hx::fsObject /*  ::openfl::events::Event */ ,(void *) &Conductor_obj::mainBeatEvent,HX_("mainBeatEvent",4b,a3,d5,36)},
	{::hx::fsObject /*  ::openfl::events::EventDispatcher */ ,(void *) &Conductor_obj::evDisp,HX_("evDisp",73,78,96,80)},
	{::hx::fsInt,(void *) &Conductor_obj::curBeat,HX_("curBeat",16,53,29,ac)},
	{::hx::fsFloat,(void *) &Conductor_obj::lastBeatTime,HX_("lastBeatTime",19,d9,c8,79)},
	{::hx::fsFloat,(void *) &Conductor_obj::beatVal,HX_("beatVal",0b,83,0f,74)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static ::String Conductor_obj_sMemberFields[] = {
	HX_("onBeat",35,ea,9d,e3),
	::String(null()) };

static void Conductor_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Conductor_obj::BPM,"BPM");
	HX_MARK_MEMBER_NAME(Conductor_obj::TIME,"TIME");
	HX_MARK_MEMBER_NAME(Conductor_obj::doConductorTime,"doConductorTime");
	HX_MARK_MEMBER_NAME(Conductor_obj::mainBeatEvent,"mainBeatEvent");
	HX_MARK_MEMBER_NAME(Conductor_obj::evDisp,"evDisp");
	HX_MARK_MEMBER_NAME(Conductor_obj::curBeat,"curBeat");
	HX_MARK_MEMBER_NAME(Conductor_obj::lastBeatTime,"lastBeatTime");
	HX_MARK_MEMBER_NAME(Conductor_obj::beatVal,"beatVal");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Conductor_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Conductor_obj::BPM,"BPM");
	HX_VISIT_MEMBER_NAME(Conductor_obj::TIME,"TIME");
	HX_VISIT_MEMBER_NAME(Conductor_obj::doConductorTime,"doConductorTime");
	HX_VISIT_MEMBER_NAME(Conductor_obj::mainBeatEvent,"mainBeatEvent");
	HX_VISIT_MEMBER_NAME(Conductor_obj::evDisp,"evDisp");
	HX_VISIT_MEMBER_NAME(Conductor_obj::curBeat,"curBeat");
	HX_VISIT_MEMBER_NAME(Conductor_obj::lastBeatTime,"lastBeatTime");
	HX_VISIT_MEMBER_NAME(Conductor_obj::beatVal,"beatVal");
};

#endif

::hx::Class Conductor_obj::__mClass;

static ::String Conductor_obj_sStaticFields[] = {
	HX_("BPM",bf,5a,32,00),
	HX_("TIME",0d,94,bd,37),
	HX_("doConductorTime",09,ed,2d,77),
	HX_("mainBeatEvent",4b,a3,d5,36),
	HX_("evDisp",73,78,96,80),
	HX_("curBeat",16,53,29,ac),
	HX_("lastBeatTime",19,d9,c8,79),
	HX_("beatVal",0b,83,0f,74),
	HX_("play",f4,2d,5a,4a),
	HX_("pause",f6,d6,57,bd),
	HX_("reset",cf,49,c8,e6),
	HX_("cancel",7a,ed,33,b8),
	HX_("setBPM",5d,30,62,6f),
	HX_("addConductorTime",b3,ec,fa,92),
	HX_("beatHit",7d,ea,04,74),
	::String(null())
};

void Conductor_obj::__register()
{
	Conductor_obj _hx_dummy;
	Conductor_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.Conductor",ed,1e,6e,bb);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Conductor_obj::__GetStatic;
	__mClass->mSetStaticField = &Conductor_obj::__SetStatic;
	__mClass->mMarkFunc = Conductor_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Conductor_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Conductor_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Conductor_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Conductor_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Conductor_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Conductor_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Conductor_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_9_boot)
HXDLIN(   9)		BPM = ((Float)120);
            	}
{
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_10_boot)
HXDLIN(  10)		TIME = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_11_boot)
HXDLIN(  11)		doConductorTime = false;
            	}
{
            	HX_GC_STACKFRAME(&_hx_pos_080e9a5446946e07_13_boot)
HXDLIN(  13)		mainBeatEvent = ( ( ::openfl::events::Event)( ::backend::events::BeatEvent_obj::__alloc( HX_CTX ,HX_("beatEvent",c4,4a,4b,7d))) );
            	}
{
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_16_boot)
HXDLIN(  16)		curBeat = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_17_boot)
HXDLIN(  17)		lastBeatTime = ((Float)0);
            	}
{
            	HX_STACKFRAME(&_hx_pos_080e9a5446946e07_19_boot)
HXDLIN(  19)		beatVal = ((( (Float)(60) ) / ::backend::Conductor_obj::BPM) * ( (Float)(1000) ));
            	}
}

} // end namespace backend
