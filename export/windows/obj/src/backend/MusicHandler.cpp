// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_backend_Conductor
#include <backend/Conductor.h>
#endif
#ifndef INCLUDED_backend_MusicHandler
#include <backend/MusicHandler.h>
#endif
#ifndef INCLUDED_flixel_FlxBasic
#include <flixel/FlxBasic.h>
#endif
#ifndef INCLUDED_flixel_sound_FlxSound
#include <flixel/sound/FlxSound.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_5d8b3968821f46c3_9_loadInstAndVoices,"backend.MusicHandler","loadInstAndVoices",0xba95f03d,"backend.MusicHandler.loadInstAndVoices","backend/MusicHandler.hx",9,0xf684bade)
HX_LOCAL_STACK_FRAME(_hx_pos_5d8b3968821f46c3_23_play,"backend.MusicHandler","play",0x202cae63,"backend.MusicHandler.play","backend/MusicHandler.hx",23,0xf684bade)
HX_LOCAL_STACK_FRAME(_hx_pos_5d8b3968821f46c3_34_stop,"backend.MusicHandler","stop",0x222e7071,"backend.MusicHandler.stop","backend/MusicHandler.hx",34,0xf684bade)
HX_LOCAL_STACK_FRAME(_hx_pos_5d8b3968821f46c3_42_pause,"backend.MusicHandler","pause",0xffb5b7a7,"backend.MusicHandler.pause","backend/MusicHandler.hx",42,0xf684bade)
HX_LOCAL_STACK_FRAME(_hx_pos_5d8b3968821f46c3_50_checkSync,"backend.MusicHandler","checkSync",0x80fa1074,"backend.MusicHandler.checkSync","backend/MusicHandler.hx",50,0xf684bade)
HX_LOCAL_STACK_FRAME(_hx_pos_5d8b3968821f46c3_7_boot,"backend.MusicHandler","boot",0x16ee04a1,"backend.MusicHandler.boot","backend/MusicHandler.hx",7,0xf684bade)
namespace backend{

void MusicHandler_obj::__construct() { }

Dynamic MusicHandler_obj::__CreateEmpty() { return new MusicHandler_obj; }

void *MusicHandler_obj::_hx_vtable = 0;

Dynamic MusicHandler_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< MusicHandler_obj > _hx_result = new MusicHandler_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool MusicHandler_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x193cc0d9;
}

 ::flixel::sound::FlxSound MusicHandler_obj::inst;

 ::flixel::sound::FlxSound MusicHandler_obj::voices;

bool MusicHandler_obj::playing;

void MusicHandler_obj::loadInstAndVoices(::String songName){
            	HX_GC_STACKFRAME(&_hx_pos_5d8b3968821f46c3_9_loadInstAndVoices)
HXLINE(  10)		if (::hx::IsNull( ::backend::MusicHandler_obj::inst )) {
HXLINE(  11)			::backend::MusicHandler_obj::inst =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX )->loadEmbedded(((HX_("assets/audio/songs/",16,0f,bc,68) + songName) + HX_("/Inst.ogg",f6,06,30,cc)),null(),null(),null());
            		}
            		else {
HXLINE(  13)			::backend::MusicHandler_obj::inst->loadEmbedded(((HX_("assets/audio/songs/",16,0f,bc,68) + songName) + HX_("/Inst.ogg",f6,06,30,cc)),null(),null(),null());
            		}
HXLINE(  15)		if (::hx::IsNull( ::backend::MusicHandler_obj::voices )) {
HXLINE(  16)			::backend::MusicHandler_obj::voices =  ::flixel::sound::FlxSound_obj::__alloc( HX_CTX )->loadEmbedded(((HX_("assets/audio/songs/",16,0f,bc,68) + songName) + HX_("/Voices.ogg",f1,c4,e0,fa)),null(),null(),null());
            		}
            		else {
HXLINE(  18)			::backend::MusicHandler_obj::voices->loadEmbedded(((HX_("assets/audio/songs/",16,0f,bc,68) + songName) + HX_("/Voices.ogg",f1,c4,e0,fa)),null(),null(),null());
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(MusicHandler_obj,loadInstAndVoices,(void))

void MusicHandler_obj::play(){
            	HX_STACKFRAME(&_hx_pos_5d8b3968821f46c3_23_play)
HXDLIN(  23)		bool _hx_tmp;
HXDLIN(  23)		if (::hx::IsNotNull( ::backend::MusicHandler_obj::inst )) {
HXDLIN(  23)			_hx_tmp = ::hx::IsNotNull( ::backend::MusicHandler_obj::voices );
            		}
            		else {
HXDLIN(  23)			_hx_tmp = false;
            		}
HXDLIN(  23)		if (_hx_tmp) {
HXLINE(  24)			::backend::MusicHandler_obj::inst->play(null(),null(),null());
HXLINE(  25)			::backend::MusicHandler_obj::voices->play(null(),null(),null());
HXLINE(  26)			::backend::MusicHandler_obj::playing = true;
HXLINE(  28)			::backend::MusicHandler_obj::inst->set_time(::backend::Conductor_obj::TIME);
HXLINE(  29)			::backend::MusicHandler_obj::voices->set_time(::backend::Conductor_obj::TIME);
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MusicHandler_obj,play,(void))

void MusicHandler_obj::stop(){
            	HX_STACKFRAME(&_hx_pos_5d8b3968821f46c3_34_stop)
HXDLIN(  34)		bool _hx_tmp;
HXDLIN(  34)		if (::hx::IsNotNull( ::backend::MusicHandler_obj::inst )) {
HXDLIN(  34)			_hx_tmp = ::hx::IsNotNull( ::backend::MusicHandler_obj::voices );
            		}
            		else {
HXDLIN(  34)			_hx_tmp = false;
            		}
HXDLIN(  34)		if (_hx_tmp) {
HXLINE(  35)			{
HXLINE(  35)				 ::flixel::sound::FlxSound _this = ::backend::MusicHandler_obj::inst;
HXDLIN(  35)				_this->cleanup(_this->autoDestroy,true);
            			}
HXLINE(  36)			{
HXLINE(  36)				 ::flixel::sound::FlxSound _this1 = ::backend::MusicHandler_obj::voices;
HXDLIN(  36)				_this1->cleanup(_this1->autoDestroy,true);
            			}
HXLINE(  37)			::backend::MusicHandler_obj::playing = false;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MusicHandler_obj,stop,(void))

void MusicHandler_obj::pause(){
            	HX_STACKFRAME(&_hx_pos_5d8b3968821f46c3_42_pause)
HXDLIN(  42)		bool _hx_tmp;
HXDLIN(  42)		if (::hx::IsNotNull( ::backend::MusicHandler_obj::inst )) {
HXDLIN(  42)			_hx_tmp = ::hx::IsNotNull( ::backend::MusicHandler_obj::voices );
            		}
            		else {
HXDLIN(  42)			_hx_tmp = false;
            		}
HXDLIN(  42)		if (_hx_tmp) {
HXLINE(  43)			::backend::MusicHandler_obj::inst->pause();
HXLINE(  44)			::backend::MusicHandler_obj::voices->pause();
HXLINE(  45)			::backend::MusicHandler_obj::playing = false;
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MusicHandler_obj,pause,(void))

void MusicHandler_obj::checkSync(){
            	HX_STACKFRAME(&_hx_pos_5d8b3968821f46c3_50_checkSync)
HXDLIN(  50)		bool _hx_tmp;
HXDLIN(  50)		if ((::backend::Conductor_obj::TIME == ::backend::MusicHandler_obj::inst->_time)) {
HXDLIN(  50)			_hx_tmp = (::backend::Conductor_obj::TIME != ::backend::MusicHandler_obj::voices->_time);
            		}
            		else {
HXDLIN(  50)			_hx_tmp = true;
            		}
HXDLIN(  50)		if (_hx_tmp) {
HXLINE(  51)			 ::flixel::sound::FlxSound _hx_tmp1 = ::backend::MusicHandler_obj::inst;
HXDLIN(  51)			_hx_tmp1->set_time(::backend::MusicHandler_obj::voices->set_time(::backend::Conductor_obj::TIME));
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(MusicHandler_obj,checkSync,(void))


MusicHandler_obj::MusicHandler_obj()
{
}

bool MusicHandler_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"inst") ) { outValue = ( inst ); return true; }
		if (HX_FIELD_EQ(inName,"play") ) { outValue = play_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"stop") ) { outValue = stop_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"pause") ) { outValue = pause_dyn(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"voices") ) { outValue = ( voices ); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"playing") ) { outValue = ( playing ); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"checkSync") ) { outValue = checkSync_dyn(); return true; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"loadInstAndVoices") ) { outValue = loadInstAndVoices_dyn(); return true; }
	}
	return false;
}

bool MusicHandler_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"inst") ) { inst=ioValue.Cast<  ::flixel::sound::FlxSound >(); return true; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"voices") ) { voices=ioValue.Cast<  ::flixel::sound::FlxSound >(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"playing") ) { playing=ioValue.Cast< bool >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *MusicHandler_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo MusicHandler_obj_sStaticStorageInfo[] = {
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(void *) &MusicHandler_obj::inst,HX_("inst",c6,43,bb,45)},
	{::hx::fsObject /*  ::flixel::sound::FlxSound */ ,(void *) &MusicHandler_obj::voices,HX_("voices",81,d6,49,5d)},
	{::hx::fsBool,(void *) &MusicHandler_obj::playing,HX_("playing",6e,0f,18,8a)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void MusicHandler_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(MusicHandler_obj::inst,"inst");
	HX_MARK_MEMBER_NAME(MusicHandler_obj::voices,"voices");
	HX_MARK_MEMBER_NAME(MusicHandler_obj::playing,"playing");
};

#ifdef HXCPP_VISIT_ALLOCS
static void MusicHandler_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(MusicHandler_obj::inst,"inst");
	HX_VISIT_MEMBER_NAME(MusicHandler_obj::voices,"voices");
	HX_VISIT_MEMBER_NAME(MusicHandler_obj::playing,"playing");
};

#endif

::hx::Class MusicHandler_obj::__mClass;

static ::String MusicHandler_obj_sStaticFields[] = {
	HX_("inst",c6,43,bb,45),
	HX_("voices",81,d6,49,5d),
	HX_("playing",6e,0f,18,8a),
	HX_("loadInstAndVoices",0c,4a,d1,38),
	HX_("play",f4,2d,5a,4a),
	HX_("stop",02,f0,5b,4c),
	HX_("pause",f6,d6,57,bd),
	HX_("checkSync",43,83,3f,a0),
	::String(null())
};

void MusicHandler_obj::__register()
{
	MusicHandler_obj _hx_dummy;
	MusicHandler_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.MusicHandler",5f,b6,cf,e7);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &MusicHandler_obj::__GetStatic;
	__mClass->mSetStaticField = &MusicHandler_obj::__SetStatic;
	__mClass->mMarkFunc = MusicHandler_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(MusicHandler_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< MusicHandler_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = MusicHandler_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = MusicHandler_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = MusicHandler_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void MusicHandler_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_5d8b3968821f46c3_7_boot)
HXDLIN(   7)		playing = false;
            	}
}

} // end namespace backend
