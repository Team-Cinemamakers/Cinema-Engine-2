// Generated by Haxe 4.3.6
#include <hxcpp.h>

#ifndef INCLUDED_backend_CoolInput
#include <backend/CoolInput.h>
#endif
#ifndef INCLUDED_flixel_FlxG
#include <flixel/FlxG.h>
#endif
#ifndef INCLUDED_flixel_input_FlxBaseKeyList
#include <flixel/input/FlxBaseKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_FlxKeyManager
#include <flixel/input/FlxKeyManager.h>
#endif
#ifndef INCLUDED_flixel_input_IFlxInputManager
#include <flixel/input/IFlxInputManager.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyList
#include <flixel/input/keyboard/FlxKeyList.h>
#endif
#ifndef INCLUDED_flixel_input_keyboard_FlxKeyboard
#include <flixel/input/keyboard/FlxKeyboard.h>
#endif
#ifndef INCLUDED_flixel_util_IFlxDestroyable
#include <flixel/util/IFlxDestroyable.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_47155f8ccfd35ccb_5_pressed,"backend.CoolInput","pressed",0x92e3fabb,"backend.CoolInput.pressed","backend/CoolInput.hx",5,0x7d26a718)
namespace backend{

void CoolInput_obj::__construct() { }

Dynamic CoolInput_obj::__CreateEmpty() { return new CoolInput_obj; }

void *CoolInput_obj::_hx_vtable = 0;

Dynamic CoolInput_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< CoolInput_obj > _hx_result = new CoolInput_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool CoolInput_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x10084ccd;
}

bool CoolInput_obj::pressed(::String str){
            	HX_STACKFRAME(&_hx_pos_47155f8ccfd35ccb_5_pressed)
HXLINE(   6)		if ((str == HX_("enter",18,6d,86,70))) {
HXLINE(   8)			 ::flixel::input::keyboard::FlxKeyList _this = ( ( ::flixel::input::keyboard::FlxKeyList)(::flixel::FlxG_obj::keys->justPressed) );
HXDLIN(   8)			return _this->keyManager->checkStatusUnsafe(13,_this->status);
            		}
HXLINE(  10)		return false;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(CoolInput_obj,pressed,return )


CoolInput_obj::CoolInput_obj()
{
}

bool CoolInput_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"pressed") ) { outValue = pressed_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *CoolInput_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *CoolInput_obj_sStaticStorageInfo = 0;
#endif

::hx::Class CoolInput_obj::__mClass;

static ::String CoolInput_obj_sStaticFields[] = {
	HX_("pressed",a2,d2,e6,39),
	::String(null())
};

void CoolInput_obj::__register()
{
	CoolInput_obj _hx_dummy;
	CoolInput_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("backend.CoolInput",87,47,7f,c9);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &CoolInput_obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(CoolInput_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< CoolInput_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = CoolInput_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = CoolInput_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace backend
