// Generated by Haxe 4.3.6
#ifndef INCLUDED_backend_events_BeatEvent
#define INCLUDED_backend_events_BeatEvent

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_openfl_events_Event
#include <openfl/events/Event.h>
#endif
HX_DECLARE_CLASS2(backend,events,BeatEvent)
HX_DECLARE_CLASS2(openfl,events,Event)

namespace backend{
namespace events{


class HXCPP_CLASS_ATTRIBUTES BeatEvent_obj : public  ::openfl::events::Event_obj
{
	public:
		typedef  ::openfl::events::Event_obj super;
		typedef BeatEvent_obj OBJ_;
		BeatEvent_obj();

	public:
		enum { _hx_ClassId = 0x212d7a9f };

		void __construct(::String label);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.events.BeatEvent")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.events.BeatEvent"); }
		static ::hx::ObjectPtr< BeatEvent_obj > __new(::String label);
		static ::hx::ObjectPtr< BeatEvent_obj > __alloc(::hx::Ctx *_hx_ctx,::String label);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~BeatEvent_obj();

		HX_DO_RTTI_ALL;
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("BeatEvent",a4,2a,1e,1f); }

};

} // end namespace backend
} // end namespace events

#endif /* INCLUDED_backend_events_BeatEvent */ 
