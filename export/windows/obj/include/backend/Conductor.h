// Generated by Haxe 4.3.6
#ifndef INCLUDED_backend_Conductor
#define INCLUDED_backend_Conductor

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(backend,Conductor)
HX_DECLARE_CLASS1(flixel,FlxBasic)
HX_DECLARE_CLASS1(flixel,FlxState)
HX_DECLARE_CLASS2(flixel,group,FlxTypedContainer)
HX_DECLARE_CLASS2(flixel,group,FlxTypedGroup)
HX_DECLARE_CLASS2(flixel,util,IFlxDestroyable)
HX_DECLARE_CLASS2(openfl,events,Event)
HX_DECLARE_CLASS2(openfl,events,EventDispatcher)
HX_DECLARE_CLASS2(openfl,events,IEventDispatcher)

namespace backend{


class HXCPP_CLASS_ATTRIBUTES Conductor_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Conductor_obj OBJ_;
		Conductor_obj();

	public:
		enum { _hx_ClassId = 0x01f72433 };

		void __construct(::hx::Null< bool >  __o_startImmedietally);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="backend.Conductor")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"backend.Conductor"); }
		static ::hx::ObjectPtr< Conductor_obj > __new(::hx::Null< bool >  __o_startImmedietally);
		static ::hx::ObjectPtr< Conductor_obj > __alloc(::hx::Ctx *_hx_ctx,::hx::Null< bool >  __o_startImmedietally);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Conductor_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Conductor",c7,77,a1,7b); }

		static void __boot();
		static Float BPM;
		static Float TIME;
		static bool doConductorTime;
		static  ::openfl::events::Event mainBeatEvent;
		static  ::openfl::events::EventDispatcher evDisp;
		static int curBeat;
		static Float lastBeatTime;
		static Float beatVal;
		static void play(::hx::Null< Float >  bpmNew,::hx::Null< bool >  runMusicPlay);
		static ::Dynamic play_dyn();

		static void pause();
		static ::Dynamic pause_dyn();

		static void reset(::hx::Null< Float >  bpmNew,::hx::Null< bool >  runMusicPlay);
		static ::Dynamic reset_dyn();

		static void cancel();
		static ::Dynamic cancel_dyn();

		static void setBPM(Float bpmNew);
		static ::Dynamic setBPM_dyn();

		static void addConductorTime(Float elapsed, ::flixel::FlxState state);
		static ::Dynamic addConductorTime_dyn();

		static void beatHit(int beatNum);
		static ::Dynamic beatHit_dyn();

		::cpp::VirtualArray onBeat;
};

} // end namespace backend

#endif /* INCLUDED_backend_Conductor */ 
